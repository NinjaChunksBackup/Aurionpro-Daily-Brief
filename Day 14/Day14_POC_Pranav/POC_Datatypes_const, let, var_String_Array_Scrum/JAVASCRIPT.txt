JAVASCRIPT

What is JavaScript?

JavaScript is a high-level, interpreted programming language that makes web pages interactive.

It runs in the browser (e.g., Chrome, Firefox).

Works alongside HTML (structure) and CSS (style).

Enables dynamic behavior: dropdowns, form validation, sliders, animations, etc.

Backbone of modern frameworks like React, Vue, and Angular.

JavaScript alert()

The alert() function is a built-in method in JavaScript that displays a popup message box to the user. 

It’s useful for testing or user confirmations,

It is mainly used for simple notifications or debugging purposes.

It pauses code execution until the user clicks “OK.”

It only shows one message and one OK button.

It does not return any value.

alert("Your message here");

JavaScript Data Types

Primitive Types (stored directly): These are the most basic types. They store a single value and are immutable (cannot be changed).

String — Text values

Text data.

Always in quotes: "Hello" or 'World'.

Used for names, messages, labels, etc.


Number — Integers & decimals

Represents both integers and decimals.

No different types for int or float like other languages.


Boolean — true or false

Only two values: true or false.

Commonly used in condition checks.


Undefined — Variable declared but not assigned

A variable that is declared but not assigned a value.

JavaScript assigns undefined automatically.


Null — Intentional absence of value

Represents the intentional absence of any object value.

You manually assign null to clear a variable.


BigInt — Large integers (beyond Number limit)

For very large integers beyond the limit of Number.

Ends with n.


Symbol — Unique, immutable value

Used to create unique identifiers.

Mainly used in advanced coding (e.g., object keys).



Non-Primitive Type: These types can hold multiple values and are mutable (can change content).

Object — Key-value pairs (arrays, functions, etc.)

A collection of key-value pairs.

Can store strings, numbers, arrays, functions, and other objects.
example arrays and functions. 


| Type      | Example           | Description                   |
| --------- | ----------------- | ----------------------------- |
| String    |  "hello"          | Text                          |
| Number    |   42, 3.14        | Numbers                       |
| Boolean   | true, false       | Logic values                  |
| Undefined | let x;            | Declared, no value            |
| Null      | let x = null;     | Empty value                   |
| BigInt    | 123456789n        | Large integers                |
| Symbol    | Symbol("id")      | Unique identifiers            |
| Object    | { name: "Tom" }   | Collection of key-value pairs |


const, let, and var


var

Old way to declare variables.

Function-scoped (not block-scoped). Function scope means that variables declared inside a function. (yesOnly inside the function)

Can be re-declared and updated.

Avoid using in modern code.

let

Modern way to declare variables.

Block-scoped (works inside {}). means a variable is only accessible within the {} curly braces (a block) where it’s declared.

Can be updated, but not re-declared in the same scope.

const

Block-scoped like let.

Cannot be updated or re-declared.

Used for constants (values that don’t change).

Must be assigned a value at the time of declaration.


| Keyword | Scope    | Re-declare | Re-assign    | Use Case               |
| ------- | -------- | ---------- | ---------    | ---------------------- |
| `var`   | Function | ✅ Yes     | ✅ Yes      | Legacy (avoid using)   |
| `let`   | Block    | ❌ No      | ✅ Yes      | Use when value changes |
| `const` | Block    | ❌ No      | ❌ No       | Use for constants      |

String in JavaScript

A string is a sequence of characters (letters, numbers, symbols), used to represent text.

Strings can be in single (') or double (") quotes.

Strings are immutable (you can't change individual characters).

let name = 'Alice';


Template String 

Introduced in ES6, template strings:

Use backticks (`) instead of quotes

Support multi-line strings

Allow embedded variables using ${}

let name = 'Alice';
let greeting = `Hello, ${name}!`;



| Method               | Description                       | Example                                |
| -------------------- | --------------------------------- | -------------------------------------- |
| `.length`            | Returns length of the string      | `"hello".length` → `5`                 |
| `.toUpperCase()`     | Converts to uppercase             | `"hi".toUpperCase()` → `"HI"`          |
| `.toLowerCase()`     | Converts to lowercase             | `"HELLO".toLowerCase()` → `"hello"`    |
| `.charAt(index)`     | Returns char at specific index    | `"abc".charAt(1)` → `"b"`              |
| `.includes(str)`     | Checks if substring exists        | `"hello".includes("he")` → `true`      |
| `.indexOf(str)`      | Returns position of substring     | `"hello".indexOf("e")` → `1`           |
| `.slice(start, end)` | Extracts part of string           | `"hello".slice(1, 4)` → `"ell"`        |
| `.replace(old, new)` | Replaces part of string           | `"cat".replace("c", "b")` → `"bat"`    |
| `.trim()`            | Removes whitespace from both ends | `"  hi  ".trim()` → `"hi"`             |
| `.split(separator)`  | Splits string into array          | `"a,b,c".split(",")` → `["a","b","c"]` |


JavaScript Arrays 

An array is a special variable that can store multiple values in a single variable.

Each value in an array has a numbered index, starting from 0.

Arrays can hold any data type: strings, numbers, objects, even other arrays.

Arrays are zero-indexed → first item is at index 0.


let arr = [value1, value2, value3];



| Method              | Description                                                    | Example                               |
| ------------------- | -------------------------------------------------------------- | ------------------------------------- |
| `push()`            | Adds item to **end**                                           | `arr.push("new")`                     |
| `pop()`             | Removes item from **end**                                      | `arr.pop()`                           |
| `unshift()`         | Adds item to **start**                                         | `arr.unshift("start")`                |
| `shift()`           | Removes item from **start**                                    | `arr.shift()`                         |
| `length`            | Returns number of elements                                     | `arr.length`                          |
| `indexOf()`         | Finds index of item                                            | `arr.indexOf("apple")`                |
| `includes()`        | Checks if value exists                                         | `arr.includes("banana")`              |
| `slice(start, end)` | Returns part of array                                          | `arr.slice(1, 3)`                     |
| `splice(start, n)`  | Removes/replaces/adds elements                                 | `arr.splice(1, 2)`                    |
| `join(separator)`   | Combines elements into string                                  | `arr.join(", ")`                      |
| `sort()`            | Sorts elements alphabetically (or numerically with a function) | `arr.sort()`                          |
| `reverse()`         | Reverses array order                                           | `arr.reverse()`                       |
| `forEach()`         | Loops through array                                            | `arr.forEach(item => ...)`            |
| `map()`             | Returns new array with function applied                        | `arr.map(item => item.toUpperCase())` |

